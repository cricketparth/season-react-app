{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"6LAGMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,uBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,qBACNC,SAAU,eA2BCE,EAfO,SAAAC,GACpB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAID,EAMFP,EAAaS,GAAhCP,EANqB,EAMrBA,KAAMC,EANe,EAMfA,SAEd,OAAO,yBAAKS,UAAS,yBAAoBH,IACrC,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC/BZU,EAAU,SAACP,GACf,OACE,yBAAKM,UAAU,oBACb,yBAAKA,UAAU,sBAAuBN,EAAMQ,WAKlDD,EAAQE,aAAe,CACrBD,QAAS,cAGID,QCVTG,E,4MACJC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,kEAEd,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAACjB,IAAKgB,EAASE,OAAOC,cAChD,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,sCAK3C,OAAIc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMV,IAClC,uCAAaqB,KAAKX,MAAMC,eAG5BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMV,IAClC,kBAAC,EAAD,CAAeA,IAAKqB,KAAKX,MAAMV,MAGjC,kBAAC,EAAD,CAASO,QAAQ,qC,+BAIxB,OACE,yBAAKF,UAAU,cACXgB,KAAKC,qB,GAzBGC,IAAMC,WA+BxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,cAAc,W","file":"static/js/main.0f875e5a.chunk.js","sourcesContent":["import './SeasonDisplay.css';\r\nimport React from 'react';\r\n\r\nconst seasonConfig = {\r\n  summer: {\r\n    text: \"Let's hit the beach!\",\r\n    iconName: 'sun'\r\n  },\r\n  winter: {\r\n    text: \"Burr, it's chilly!\",\r\n    iconName: 'snowflake'\r\n  }\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? 'summer' : 'winter';\r\n  } else {\r\n    return lat > 0 ? 'winter' : 'summer';\r\n  }\r\n}\r\n\r\nconst SeasonDisplay = props => {\r\n  const season = getSeason(props.lat, new Date().getMonth());\r\n\r\n  // using ES2015 destructuring to get {text, iconName}\r\n  // it selects the correct properties using the season key, and \r\n  // destructures these values into the two variables below\r\n  const { text, iconName } = seasonConfig[season];\r\n\r\n  return <div className={`season-display ${season}`}>\r\n      <i className={`icon-left massive ${iconName} icon`} />\r\n      <h1>{text}</h1>\r\n      <i className={`icon-right massive ${iconName} icon`} />\r\n    </div>;\r\n};\r\n\r\nexport default SeasonDisplay;\r\n\r\n//Parth Pathak","import React from 'react';\r\n\r\nconst Spinner = (props) => {\r\n  return (\r\n    <div className=\"ui active dimmer\">\r\n      <div className=\"ui big text loader\">{ props.message }</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n  message: 'Loading...'\r\n};\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay';\r\nimport Spinner from './Spinner';\r\nclass App extends React.Component {\r\n  state = { lat: null, errorMessage: '' };\r\n\r\n  componentDidMount() {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      position => this.setState({lat: position.coords.latitude}),\r\n      err => this.setState({ errorMessage: err.message })\r\n    );\r\n  }\r\n\r\n  renderContent() {\r\n    if (this.state.errorMessage && !this.state.lat) {\r\n      return <div>Error: {this.state.errorMessage}</div>\r\n    }\r\n\r\n    if (!this.state.errorMessage && this.state.lat) {\r\n      return <SeasonDisplay lat={this.state.lat} />\r\n    }\r\n\r\n    return <Spinner message=\"Please accept location request\" />\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"border red\">\r\n        { this.renderContent() }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.querySelector('#root')\r\n);\r\n\r\n"],"sourceRoot":""}